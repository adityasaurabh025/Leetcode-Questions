Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.


Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).



Solution:---------

Sorting the array first, then use Two Pointers approach:

If we use brute force, the time complexity will reach O(n^3) , it will TLE, so we need to reduce time complexity.

Sorting the array first, the time complexity O(nlogn).

Traverse the array nums, every time we fixed a value nums[i],

Then use the front pointer to point to left = i+1, and the rear pointer to point to right = nums.length - 1,

Let sum = nums[i] + nums[left] + nums[right], judge the target and sum, If it is closer, update the result ans.

Judge relationship between sum and target, because the array is ordered. If sum > target, right--, If sum < target, left++. If sum == target, means that the distance is 0 and return the result.

In the whole traversal process, we have to traversal n times, the two pointer is n times, and the time complexity is O(n^2), so the Total time complexity: O(nlogn)+O(n^2).


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = nums[0] + nums[1] + nums[nums.length - 1];
        for(int i = 0; i < nums.length - 2; i++)
        {
            int start = i + 1, end = nums.length - 1;
            while(start < end)
            {
                int currentSum = nums[i] + nums[start] + nums[end];
                if(currentSum > target)
                {
                    end--;
                }
                else{
                    start++;
                }
                if(Math.abs(currentSum - target) < Math.abs(closestSum - target))
                {
                    closestSum = currentSum;
                }
            }
        }
        return closestSum;
    }
}
